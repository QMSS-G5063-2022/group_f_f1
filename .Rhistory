mutate(prop = status_count / sum(rb_status_2019$status_count) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
## mercedes
merc_status_2019 <- df2 %>%
filter(name.x == "Mercedes", year == 2019) %>%
na.omit() %>%
group_by(name.x, status) %>%
summarize(status_count = n())
## compute position of labels
merc_status_2019 <- merc_status_2019 %>%
arrange(desc(status_count)) %>%
mutate(prop = status_count / sum(merc_status_2019$status_count) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
## mcclaren
mcl_status_2019 <- df2 %>%
filter(name.x == "McLaren", year == 2019) %>%
na.omit() %>%
group_by(name.x, status) %>%
summarize(status_count = n())
## compute position of labels
mcl_status_2019 <- mcl_status_2019 %>%
arrange(desc(status_count)) %>%
mutate(prop = status_count / sum(mcl_status_2019$status_count) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
pie19 <- plot_ly(labels = ~status, values = ~prop,
textposition = 'inside',textinfo = 'label+percent') %>%
add_pie(data = ferrari_status_2019, name = "Ferrari", marker = list(colors = c("#1BBC00", "#FF0000",
"#ADADAD", "#47ABFF",
"#000000", "#505050")),
domain = list(row = 0, column = 0),
hovertemplate = paste("<b>Status</b>:", ferrari_status_2019$status, "<br>",
"<b>Status Percentage</b>:", ferrari_status_2019$prop, "<br>")) %>%
add_pie(data = rb_status_2019, name = "Red Bull",marker = list(colors = c("#1BBC00", "#ADADAD",
"#47ABFF", "#000000",
"#FF0000")),
domain = list(row = 0, column = 1),
hovertemplate = paste("<b>Status</b>:", rb_status_2019$status, "<br>",
"<b>Status Percentage</b>:", rb_status_2019$prop, "<br>"))%>%
add_pie(data = merc_status_2019, name = "Mercedes", marker = list(colors = c("#1BBC00", "#000000",
"#47ABFF",
"#ADADAD")),
domain = list(row = 1, column = 0),
hovertemplate = paste("<b>Status</b>:", merc_status_2019$status, "<br>",
"<b>Status Percentage</b>:", merc_status_2019$prop, "<br>"))%>%
add_pie(data = mcl_status_2019, name = "McLaren", marker = list(colors = c("#1BBC00", "#ADADAD",
"#47ABFF", "#FF0000",
"#505050")),
domain = list(row = 1, column = 1),
hovertemplate = paste("<b>Status</b>:", mcl_status_2019$status, "<br>",
"<b>Status Percentage</b>:", mcl_status_2019$prop, "<br>"))%>%
layout(title = '2019 Constructor Statuses', showlegend = T, grid=list(rows=2, columns=2),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
annotations = list(x = c(.004, .55, .0002, .55),
y = c(.78, .78, .22, .22),
text = c("Ferrari","Red Bull","Mercedes","McLaren"),
xref = "papper",
yref = "papper",
showarrow = F
)
)
pie19
## ferrari
ferrari_status_2021 <- df2 %>%
filter(name.x == "Ferrari", year == 2021) %>%
na.omit() %>%
group_by(name.x, status) %>%
summarize(status_count = n())
## compute position of labels
ferrari_status_2021 <- ferrari_status_2021 %>%
arrange(desc(status_count)) %>%
mutate(prop = status_count / sum(ferrari_status_2021$status_count) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
## red bull
rb_status_2021 <- df2 %>%
filter(name.x == "Red Bull", year == 2021) %>%
na.omit() %>%
group_by(name.x, status) %>%
summarize(status_count = n())
## compute position of labels
rb_status_2021 <- rb_status_2021 %>%
arrange(desc(status_count)) %>%
mutate(prop = status_count / sum(rb_status_2021$status_count) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
## mercedes
merc_status_2021 <- df2 %>%
filter(name.x == "Mercedes", year == 2021) %>%
na.omit() %>%
group_by(name.x, status) %>%
summarize(status_count = n())
## compute position of labels
merc_status_2021 <- merc_status_2021 %>%
arrange(desc(status_count)) %>%
mutate(prop = status_count / sum(merc_status_2021$status_count) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
## mcclaren
mcl_status_2021 <- df2 %>%
filter(name.x == "McLaren", year == 2021) %>%
na.omit() %>%
group_by(name.x, status) %>%
summarize(status_count = n())
## compute position of labels
mcl_status_2021 <- mcl_status_2021 %>%
arrange(desc(status_count)) %>%
mutate(prop = status_count / sum(mcl_status_2021$status_count) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
pie21 <- plot_ly(labels = ~status, values = ~prop,
textposition = 'inside',textinfo = 'label+percent') %>%
add_pie(data = ferrari_status_2021, name = "Ferrari", marker = list(colors = c("#1BBC00", "#ADADAD",
"#47ABFF", "#FF0000")),
domain = list(row = 0, column = 0),
hovertemplate = paste("<b>Status</b>:", ferrari_status_2021$status, "<br>",
"<b>Status Percentage</b>:", ferrari_status_2021$prop, "<br>")) %>%
add_pie(data = rb_status_2021, name = "Red Bull", marker = list(colors = c("#1BBC00", "#FF0000",
"#ADADAD", "#000000",
"#47ABFF")),
domain = list(row = 0, column = 1),
hovertemplate = paste("<b>Status</b>:", rb_status_2021$status, "<br>",
"<b>Status Percentage</b>:", rb_status_2021$prop, "<br>"))%>%
add_pie(data = merc_status_2021, name = "Mercedes", marker = list(colors = c("#1BBC00", "#FF0000",
"#47ABFF", "#ADADAD")),
domain = list(row = 1, column = 0),
hovertemplate = paste("<b>Status</b>:", merc_status_2021$status, "<br>",
"<b>Status Percentage</b>:", merc_status_2021$prop, "<br>"))%>%
add_pie(data = mcl_status_2021, name = "McLaren", marker = list(colors = c("#1BBC00", "#ADADAD",
"#47ABFF","#FF0000")),
domain = list(row = 1, column = 1),
hovertemplate = paste("<b>Status</b>:", mcl_status_2021$status, "<br>",
"<b>Status Percentage</b>:", mcl_status_2021$prop, "<br>")) %>%
layout(title = '2021 Constructor Statuses', showlegend = T, grid=list(rows=2, columns=2),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
annotations = list(x = c(.004, .55, .0002, .55),
y = c(.78, .78, .22, .22),
text = c("Ferrari","Red Bull","Mercedes","McLaren"),
xref = "papper",
yref = "papper",
showarrow = F
)
)
pie21
incidents_by_circuit %>%
filter(year == 2019) %>%
group_by(constructor_name) %>%
summarise(n = n()) %>%
plot_ly(type = "bar",
x = ~constructor_name,
y = ~n,
marker = list(color =  c("#9B0000", # Alfa Romeo
"#DC0000", # Ferrari
"#B6BABD", # Haas
"#FF8700", # McLaren
"#00D2BE", # Mercedes
"#F596C8", # Racing Point
"#1E41FF", # Red Bull
"#FFF500", # Renault
"#469BFF", # Toro Rosso
"#FFFFFF" # Williams
)),
# text = ~constructor_name,
hovertemplate = paste('<b>Team</b>: %{x}<br>',
'Number of Accidents or Collisions</b>: %{y}<br><extra></extra>')) %>%
layout(title = 'Incidents by Constructor in 2019',
xaxis = list(title = 'Constructor'),
yaxis = list(title = 'Count of Accidents or Collisions'))
incidents_by_circuit %>%
filter(year == 2021) %>%
group_by(constructor_name) %>%
summarise(n = n()) %>%
plot_ly(type = "bar",
x = ~constructor_name,
y = ~n,
marker = list(color =  c("#B12039", # Alfa Romeo
"#4E7C9B", # Alpha Tauri
"#2293D1", # Alpine
"#2D826D", # Aston Martin
"#ED1C24", # Ferrari
"#B6BABD", # Haas
"#F58020", # McLaren
"#6CD3BF", # Mercedes
"#1E5BC6", # Red Bull
"#37BEDD" # Williams
)),
# text = ~constructor_name,
hovertemplate = paste('<b>Team</b>: %{x}<br>',
'Number of Accidents or Collisions</b>: %{y}<br><extra></extra>')) %>%
layout(title = 'Incidents by Constructor in 2021',
xaxis = list(title = 'Constructor'),
yaxis = list(title = 'Count of Accidents or Collisions'))
links_driver_lhmv_2019 <-
links_driver_2019 %>%
filter(full_name == "Lewis Hamilton" | full_name == "Max Verstappen") %>%
filter(source == 1)
links_driver_lhmv_2019 <- as.data.frame(links_driver_lhmv_2019)
nodes19 <- c("0","1","2","3","4","5","6","7","8","9")
nodes19 <- as.data.frame(nodes19)
my_color <-
'd3.scaleOrdinal() .domain(["Lewis Hamilton", "Max Verstappen"]) .range(["#6CD3BF", "#1E41FF"])'
sankeyNetwork(Links = links_driver_lhmv_2019, Nodes = nodes19, Source = "source",
Target = "target", Value = "value",
NodeID = "nodes19", fontSize= 25, nodeWidth = 20,
colourScale=my_color, LinkGroup="full_name",
NodeGroup=NULL)
links_driver_lhmv_2021 <-
links_driver_2021 %>%
filter(full_name == "Lewis Hamilton" | full_name == "Max Verstappen")  %>%
filter(source == 1)
links_driver_lhmv_2021 <- as.data.frame(links_driver_lhmv_2021)
nodes21 <- c("0","1","2","3","4","5")
nodes21 <- as.data.frame(nodes21)
my_color <-
'd3.scaleOrdinal() .domain(["Lewis Hamilton", "Max Verstappen"]) .range(["#6CD3BF", "#1E41FF"])'
sankeyNetwork(Links = links_driver_lhmv_2021, Nodes = nodes21, Source = "source",
Target = "target", Value = "value",
NodeID = "nodes21", fontSize= 25, nodeWidth = 20,
colourScale=my_color, LinkGroup = "full_name",
NodeGroup = NULL)
lap_times_by_driver_2019 <-
lap_times %>%
left_join(skinny_races_circuits, by = ("raceId")) %>%
filter(year == 2019) %>%
left_join(xover, by = c("driverId" = "driverId",
"year" = "year")) %>%
group_by(year, raceId, driverId, full_name, constructor_name) %>%
summarise(min(milliseconds)) %>%
rename(fastestLap_ms = "min(milliseconds)") %>%
mutate(fastestLap_s = fastestLap_ms/1000) %>%
group_by(year, raceId) %>%
mutate(rank = rank(fastestLap_s)) %>%
filter(rank == 1) %>%
group_by(full_name, constructor_name) %>%
summarise(count_of_fastest_lap = n()) %>%
arrange()
#library(ggplot2)
#library(plotly)
lap_times_by_driver_2019 %>%
plot_ly(type = "bar",
x = ~count_of_fastest_lap,
y = ~full_name,
marker = list(color =c("#DC0000", # Charles LeClerc
"#F0D787", # K Mag (Haas)
"#00D2BE", # Lewis Hamilton; Mercedes
"#1E41FF", # Max Verstappen; Red Bull
"#DC0000", # Vettel Ferrari 2019; Aston Martin 2021
"#00D2BE")),
text = ~constructor_name,
hovertemplate = paste('<b>Driver</b>: %{y}<br>',
'<b>Team</b>: %{text}<br>',
'Number of Fastest Laps</b>: %{x}<br><extra></extra>')) %>%
layout(title = 'Fastest Laps in 2019', xaxis = list(title = 'Count of Fastest Laps'),
yaxis = list(title = 'Driver'))
lap_times_by_driver_2021 <-
lap_times %>%
left_join(skinny_races_circuits, by = ("raceId")) %>%
filter(year == 2021) %>%
left_join(xover, by = c("driverId" = "driverId",
"year" = "year")) %>%
group_by(year, raceId, driverId, full_name, constructor_name) %>%
summarise(min(milliseconds)) %>%
rename(fastestLap_ms = "min(milliseconds)") %>%
mutate(fastestLap_s = fastestLap_ms/1000) %>%
group_by(year, raceId) %>%
mutate(rank = rank(fastestLap_s)) %>%
filter(rank == 1) %>%
group_by(full_name, constructor_name) %>%
summarise(count_of_fastest_lap = n()) %>%
arrange()
lap_times_by_driver_2021 %>%
plot_ly(type = "bar",
x = ~count_of_fastest_lap,
y = ~full_name,
marker = list(color =c("#F58020", # Ricciardo Renault 2019, 2021 at McL
"#F58020", # Norris, McLaren
"#00D2BE", # Lewis Hamilton; Mercedes
"#1E41FF", # Max Verstappen; Red Bull
"#4E7C9B", # Gasly Toro Rosso 2019/Alpha Tauri 2021
"#1E5BC6", # Perez, Racing Point 2019, RB 2021
"#00D2BE" # Bottoas, Mercedes
)),
text = ~constructor_name,
hovertemplate = paste('<b>Driver</b>: %{y}<br>',
'<b>Team</b>: %{text}<br>',
'Number of Fastest Laps</b>: %{x}<br><extra></extra>')) %>%
layout(title = 'Fastest Laps in 2021', xaxis = list(title = 'Count of Fastest Laps'),
yaxis = list(title = 'Driver'))
points_2021 <- ggplot(races2021, aes(x=date,y=points,group=full_name,color=full_name, linetype=full_name, text=paste("<b>Driver:</b> ",full_name,"<br><b>Team: </b>",constructor_name,"<br><b>Points: ",points))) +
geom_point() +
geom_smooth(se=FALSE) +
coord_flip() +
ggtitle("2021") +
scale_linetype_manual(values=xover_2021$line_type, name="full_name") +
scale_color_manual(values=xover_2021$colorcol, name="full_name") +
theme_classic()
points_2019 <- ggplot(races2019, aes(x=date,y=points,group=full_name,color=full_name, linetype=full_name,text=paste("<b>Driver:</b> ",full_name,"<br><b>Team: </b>",constructor_name,"<br><b>Points: ",points))) +
geom_point() +
geom_smooth(se=FALSE) +
coord_flip() +
ggtitle("2019") +
scale_linetype_manual(values=xover_2019$line_type, name="full_name") +
scale_color_manual(values=xover_2019$colorcol, name="full_name") + theme_classic() +
labs (x = "Date", y = "Total Points") +
guides(linetype=guide_legend(ncol=2, byrow=FALSE))
options(repr.plot.width = 1, repr.plot.height = 0.75)
points_2019_chart <- ggplotly(points_2019, tooltip="text")
points_2021_chart <- ggplotly(points_2021, tooltip="text")
points_2019_chart
points_2021 <- ggplot(races2021, aes(x=date,y=points,group=full_name,color=full_name, linetype=full_name, text=paste("<b>Driver:</b> ",full_name,"<br><b>Team: </b>",constructor_name,"<br><b>Points: ",points))) +
geom_point() +
geom_smooth(se=FALSE) +
coord_flip() +
ggtitle("2021") +
scale_linetype_manual(values=xover_2021$line_type, name="full_name") +
scale_color_manual(values=xover_2021$colorcol, name="full_name") +
theme_classic()
points_2019 <- ggplot(races2019, aes(x=date,y=points,group=full_name,color=full_name, linetype=full_name,text=paste("<b>Driver:</b> ",full_name,"<br><b>Team: </b>",constructor_name,"<br><b>Points: ",points))) +
geom_point() +
geom_smooth(se=FALSE) +
coord_flip() +
ggtitle("2019") +
scale_linetype_manual(values=xover_2019$line_type, name="full_name") +
scale_color_manual(values=xover_2019$colorcol, name="full_name") + theme_classic() +
labs (x = "Date", y = "Total Points") +
guides(linetype=guide_legend(ncol=2, byrow=FALSE))
options(repr.plot.height = 6, repr.plot.width = 6)
points_2019_chart <- ggplotly(points_2019, tooltip="text")
points_2021_chart <- ggplotly(points_2021, tooltip="text")
points_2019_chart
options(repr.plot.height = 6, repr.plot.width = 6)
points_2019_chart
library(tidyverse)
library(stringr)
library(magrittr)
library(htmltools)
library(ggplot2)
library(ggthemes)
library(DT)
library(leaflet)
library(leaflet.extras)
library(sf)
library(rgdal) # for reading shape files into R
library(rgeos)
library(maps)
# Please run following command in R-Studio to target
#  appropriate command for "crosstalk" package
#  otherwise an "All" entry will appear in filter
#  select dropdown
# devtools::install_version(“crosstalk”, version = “1.1.1”)
library(crosstalk)
library(vembedr)
library(tidyr)
library(networkD3)
library(plotly)
library(lubridate)
install.packages("cowplot")        # Install cowplot package
library(cowplot)
plot_grid(points_2019_chart, points_2021_chart, ncol = 2, align = "h")
plot_grid(points_2019_chart, points_2021_chart, ncol = 2, nrow = 1)
library(tidyverse)
library(stringr)
library(magrittr)
library(htmltools)
library(ggplot2)
library(ggthemes)
library(DT)
library(leaflet)
library(leaflet.extras)
library(sf)
library(rgdal) # for reading shape files into R
library(rgeos)
library(maps)
# Please run following command in R-Studio to target
#  appropriate command for "crosstalk" package
#  otherwise an "All" entry will appear in filter
#  select dropdown
# devtools::install_version(“crosstalk”, version = “1.1.1”)
library(crosstalk)
library(vembedr)
library(tidyr)
library(networkD3)
library(plotly)
library(lubridate)
##install.packages("cowplot")        # Install cowplot package
#library(cowplot)
install.packages("gridExtra")               # Install gridExtra package
library("gridExtra")                        # Load gridExtra package
library(tidyverse)
library(stringr)
library(magrittr)
library(htmltools)
library(ggplot2)
library(ggthemes)
library(DT)
library(leaflet)
library(leaflet.extras)
library(sf)
library(rgdal) # for reading shape files into R
library(rgeos)
library(maps)
# Please run following command in R-Studio to target
#  appropriate command for "crosstalk" package
#  otherwise an "All" entry will appear in filter
#  select dropdown
# devtools::install_version(“crosstalk”, version = “1.1.1”)
library(crosstalk)
library(vembedr)
library(tidyr)
library(networkD3)
library(plotly)
library(lubridate)
##install.packages("cowplot")        # Install cowplot package
#library(cowplot)
#install.packages("gridExtra")               # Install gridExtra package
library(gridExtra)                        # Load gridExtra package
#options(repr.plot.height = 6, repr.plot.width = 6)
points_2019_chart
#plot_grid(points_2019_chart, points_2021_chart, ncol = 2, nrow = 1)
grid.arrange(points_2019_chart, points_2021_chart, ncol = 2)
library(gridExtra)
grid.arrange(points_2019_chart, points_2021_chart, ncol=2)
library(gridExtra)
grid.arrange(points_2019_chart, points_2021_chart) #, ncol=2)
library(gridExtra)
grid.arrange(points_2019_chart, points_2021_chart) #, ncol=2)
library(gridExtra)
grid.arrange(points_2019_chart, points_2021_chart) #, ncol=2)
library(gridExtra)
grid.newpage()
library(gridExtra)
library(grid)
#grid.newpage()
grid.arrange(points_2019_chart, points_2021_chart) #, ncol=2)
library(gridExtra)
grid.arrange(points_2019_chart, points_2021_chart, ncol=2)
library(tidyverse)
library(stringr)
library(magrittr)
library(htmltools)
library(ggplot2)
library(ggthemes)
library(DT)
library(leaflet)
library(leaflet.extras)
library(sf)
library(rgdal) # for reading shape files into R
library(rgeos)
library(maps)
# Please run following command in R-Studio to target
#  appropriate command for "crosstalk" package
#  otherwise an "All" entry will appear in filter
#  select dropdown
# devtools::install_version(“crosstalk”, version = “1.1.1”)
library(crosstalk)
library(vembedr)
library(tidyr)
library(networkD3)
library(plotly)
library(lubridate)
points_2019_chart
points_2019_chart
library(tidyverse)
library(stringr)
library(magrittr)
library(htmltools)
library(ggplot2)
library(ggthemes)
library(DT)
library(leaflet)
library(leaflet.extras)
library(sf)
library(rgdal) # for reading shape files into R
library(rgeos)
library(maps)
# Please run following command in R-Studio to target
#  appropriate command for "crosstalk" package
#  otherwise an "All" entry will appear in filter
#  select dropdown
# devtools::install_version(“crosstalk”, version = “1.1.1”)
library(crosstalk)
library(vembedr)
library(tidyr)
library(networkD3)
library(plotly)
library(lubridate)
knitr::opts_chunk$set(fig.width=unit(9,"cm"), fig.height=unit(11,"cm"))
points_2021 <- ggplot(races2021, aes(x=date,y=points,group=full_name,color=full_name, linetype=full_name, text=paste("<b>Driver:</b> ",full_name,"<br><b>Team: </b>",constructor_name,"<br><b>Points: ",points))) +
geom_point() +
geom_smooth(se=FALSE) +
coord_flip() +
ggtitle("2021") +
scale_linetype_manual(values=xover_2021$line_type, name="full_name") +
scale_color_manual(values=xover_2021$colorcol, name="full_name") +
theme_classic()
points_2019 <- ggplot(races2019, aes(x=date,y=points,group=full_name,color=full_name, linetype=full_name,text=paste("<b>Driver:</b> ",full_name,"<br><b>Team: </b>",constructor_name,"<br><b>Points: ",points))) +
geom_point() +
geom_smooth(se=FALSE) +
coord_flip() +
ggtitle("2019") +
scale_linetype_manual(values=xover_2019$line_type, name="full_name") +
scale_color_manual(values=xover_2019$colorcol, name="full_name") + theme_classic() +
labs (x = "Date", y = "Total Points") +
guides(linetype=guide_legend(ncol=2, byrow=FALSE))
points_2019_chart <- ggplotly(points_2019, tooltip="text")
points_2021_chart <- ggplotly(points_2021, tooltip="text")
points_2019_chart
points_2019_chart
points_2019_chart
points_2021_chart
points_2019_chart
points_2019_chart
#embed_url("https://www.youtube.com/watch?v=twAlqtvVMdc")
devtools::install_version(“crosstalk”, version = “1.1.1”)
devtools::install_version(“crosstalk”, version = “1.1.1”)
