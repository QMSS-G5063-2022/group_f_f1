status_21 <- df2 %>%
filter(year == 2021) %>%
group_by(name.x, status) %>%
summarize(status_count = n())
## plot constructor status for 2021
status_21_plot <- ggplot(status_21, aes(x = name.x, y = status_count, fill = status,
text = paste("<b>Constructor</b>:", status_21$name.x, "<br>",
"<b>Status Count</b>:", status_21$status_count, "<br>",
"<b>Status</b>:", status_21$status, "<br>"))) +
theme(legend.position="none") +
geom_col() +
coord_flip() +
scale_fill_manual(values = c("Accident" = "#000000",
"Car Failure" = "#47ABFF",
"Collision" = "#FF0000",
"Disqualified" = "#505050",
"DNF" = "#ADADAD",
"Finished" = "#1BBC00")) +
labs(x = element_blank(), y = "Status Count",
title="2021 Constructor Status")
status_21_plotly <- ggplotly(status_21_plot, tooltip = "text")
status_21_plotly
library(tidyverse)
library(stringr)
library(magrittr)
library(htmltools)
library(ggplot2)
library(ggthemes)
library(DT)
library(leaflet)
library(sf)
library(rgeos)
library(maps)
# Please run following command in R-Studio to target
#  appropriate command for "crosstalk" package
#  otherwise an "All" entry will appear in filter
#  select dropdown
# devtools::install_version(“crosstalk”, version = “1.1.1”)
library(crosstalk)
library(tidyr)
library(plotly)
library(lubridate)
# read in data
drivers <- read.csv("raw_data/drivers.csv")
qps <- read.csv("raw_data/qualifying.csv")
pitstops <- read.csv("raw_data/pit_stops.csv")
standings <- read.csv("raw_data/driver_standings.csv")
races <- read.csv("raw_data/races.csv")
results <- read.csv("raw_data/results.csv")
constructors <- read.csv("raw_data/constructors.csv")
qualifying <- read.csv("raw_data/qualifying.csv")
circuits <- read.csv("raw_data/circuits.csv")
circuit_type <- read.csv("raw_data/circuit_type.csv")
lap_times <- read.csv("raw_data/lap_times.csv")
status2 <- read.csv("raw_data/status2.csv")
cstandings <- read.csv("raw_data/constructor_standings.csv")
## preparing data
df <- left_join(constructors, cstandings, by = "constructorId")
df <- left_join(df, races, by = "raceId")
## first subset
df <- subset(df, select= c(constructorId, constructorRef, name.x, constructorStandingsId,
raceId, points, position, year, circuitId, name.y, wins))
# ## 2019 season
# season_19 <- df %>%
#   filter (year == 2019)
#
# ## 2021 season
# season_21 <- df %>%
#   filter(year == 2021)
## points data frame
wins_df <- df %>%
filter(year == 2019 | year == 2021) %>%
rename('name'=name.x)
wins_plotly <- wins_df %>%
mutate(col_sum_2019 = if_else(year == 2019, wins, as.integer(0)),
col_sum_2021 = if_else(year == 2021, wins, as.integer(0))) %>%
group_by(name) %>%
summarize(year_2019 = max(col_sum_2019),
year_2021 = max(col_sum_2021)) %>%
filter(year_2019 != 0 | year_2021 != 0) %>%
plot_ly(type = "bar", name = '2019',
x = ~name,
y = ~year_2019,
marker = list(color =  c("Mercedes" = "#6CD3BF",
"Ferrari" = "#ED1C24",
"Red Bull" = "#1E5BC6",
"Alpine F1 Team" = "#2293D1",
"McLaren" = "#F58020"
)),
hovertemplate = paste('<b>Team</b>: %{x}<br>',
'<b>Year</b>: 2019<br>',
'Number of Wins</b>: %{y}<br>'),
showlegend = F) %>%
add_trace(y = ~year_2021, name = '2021',
marker = list(color = c("Mercedes" = "#A6E4D8",
"Ferrari" = "#F4767B",
"Red Bull" = "#789CDC",
"Alpine F1 Team" = "#7ABEE3",
"Mclaren" =  "#F9B279"
)
),
hovertemplate = paste('<b>Team</b>: %{x}<br>',
'<b>Year</b>: 2021<br>',
'Number of Wins</b>: %{y}<br>'),
showlegend = F) %>%
layout(title = 'Wins by Constructor',
xaxis = list(title = '<br><br><br>Constructor'),
yaxis = list(title = 'Number of Wins'),
barmode = 'group')
wins_plotly
points_df <- df %>%
filter(year == 2019 | year == 2021) %>%
rename('name'=name.x)
## points plot
points_plotly <- points_df %>%
mutate(col_sum_2019 = if_else(year == 2019, points, 0),
col_sum_2021 = if_else(year == 2021, points, 0)) %>%
group_by(name) %>%
summarize(year_2019 = max(col_sum_2019),
year_2021 = max(col_sum_2021)) %>%
arrange(desc(year_2019, year_2021)) %>%
filter(year_2019 != 0 | year_2021 != 0) %>%
plot_ly(type = "bar", name = '2019',
x = ~name,
y = ~year_2019,
marker = list(color =  c("Mercedes" = "#6CD3BF",
"Ferrari" = "#ED1C24",
"Red Bull" = "#1E5BC6",
"McLaren" = "#F58020",
"Renault" = "#FFF500",
"Toro Rosso" = "#469BFF",
"Racing Point" = "#F596C8",
"Alfa Romeo" = "#B12039",
"Haas F1 Team" = "#B6BABD",
"Williams" = "#37BEDD",
"AlphaTauri" = "#4E7C9B",
"Alpine F1 Team" = "#2293D1",
"Aston Martin" = "#2D826D"
)),
hovertemplate = paste('<b>Team</b>: %{x}<br>',
'<b>Year</b>: 2019<br>',
'Total Amount of Points</b>: %{y}<br>'),
showlegend = F) %>%
add_trace(y = ~year_2021, name = '2021',
marker = list(color = c("Mercedes" = "#A6E4D8",
"Ferrari" = "#F4767B",
"Red Bull" = "#789CDC",
"Mclaren" = "#F9B279",
"Renault" = "#FFF966",
"Toro Rosso" = "#90C3FF",
"Racing Point" = "#F9C0DE",
"Alfa Romeo" = "#D07988",
"Haas F1 Team" = "#D3D5D7",
"Williams" = "#87D8EA",
"AlphaTauri" = "#94B0C3",
"Alpine F1 Team" = "#7ABEE3",
"Aston Martin" = "#81B4A7"
)
),
hovertemplate = paste('<b>Team</b>: %{x}<br>',
'<b>Year</b>: 2021<br>',
'Total Amount of Points</b>: %{y}<br>'),
showlegend = F) %>%
layout(title = 'Total Points Earned by Constructor',
xaxis = list(title = '<br><br><br>Constructor'),
yaxis = list(title = 'Total Points'),
barmode = 'group')
points_plotly
points_df <- df %>%
filter(year == 2019 | year == 2021) %>%
rename('name'=name.x)
## points plot
points_plotly <- points_df %>%
mutate(col_sum_2019 = if_else(year == 2019, points, 0),
col_sum_2021 = if_else(year == 2021, points, 0)) %>%
group_by(name) %>%
summarize(year_2019 = max(col_sum_2019),
year_2021 = max(col_sum_2021)) %>%
arrange(desc(year_2019), desc(year_2021)) %>%
filter(year_2019 != 0 | year_2021 != 0) %>%
plot_ly(type = "bar", name = '2019',
x = ~name,
y = ~year_2019,
marker = list(color =  c("Mercedes" = "#6CD3BF",
"Ferrari" = "#ED1C24",
"Red Bull" = "#1E5BC6",
"McLaren" = "#F58020",
"Renault" = "#FFF500",
"Toro Rosso" = "#469BFF",
"Racing Point" = "#F596C8",
"Alfa Romeo" = "#B12039",
"Haas F1 Team" = "#B6BABD",
"Williams" = "#37BEDD",
"AlphaTauri" = "#4E7C9B",
"Alpine F1 Team" = "#2293D1",
"Aston Martin" = "#2D826D"
)),
hovertemplate = paste('<b>Team</b>: %{x}<br>',
'<b>Year</b>: 2019<br>',
'Total Amount of Points</b>: %{y}<br>'),
showlegend = F) %>%
add_trace(y = ~year_2021, name = '2021',
marker = list(color = c("Mercedes" = "#A6E4D8",
"Ferrari" = "#F4767B",
"Red Bull" = "#789CDC",
"Mclaren" = "#F9B279",
"Renault" = "#FFF966",
"Toro Rosso" = "#90C3FF",
"Racing Point" = "#F9C0DE",
"Alfa Romeo" = "#D07988",
"Haas F1 Team" = "#D3D5D7",
"Williams" = "#87D8EA",
"AlphaTauri" = "#94B0C3",
"Alpine F1 Team" = "#7ABEE3",
"Aston Martin" = "#81B4A7"
)
),
hovertemplate = paste('<b>Team</b>: %{x}<br>',
'<b>Year</b>: 2021<br>',
'Total Amount of Points</b>: %{y}<br>'),
showlegend = F) %>%
layout(title = 'Total Points Earned by Constructor',
xaxis = list(title = '<br><br><br>Constructor'),
yaxis = list(title = 'Total Points'),
barmode = 'group')
points_plotly
wins_df <- df %>%
filter(year == 2019 | year == 2021) %>%
rename('name'=name.x)
wins_plotly <- wins_df %>%
mutate(col_sum_2019 = if_else(year == 2019, wins, as.integer(0)),
col_sum_2021 = if_else(year == 2021, wins, as.integer(0))) %>%
group_by(name) %>%
summarize(year_2019 = max(col_sum_2019),
year_2021 = max(col_sum_2021)) %>%
arrange(desc(year_2019), desc(year_2021)) %>%
filter(year_2019 != 0 | year_2021 != 0) %>%
plot_ly(type = "bar", name = '2019',
x = ~name,
y = ~year_2019,
marker = list(color =  c("Mercedes" = "#6CD3BF",
"Ferrari" = "#ED1C24",
"Red Bull" = "#1E5BC6",
"Alpine F1 Team" = "#2293D1",
"McLaren" = "#F58020"
)),
hovertemplate = paste('<b>Team</b>: %{x}<br>',
'<b>Year</b>: 2019<br>',
'Number of Wins</b>: %{y}<br>'),
showlegend = F) %>%
add_trace(y = ~year_2021, name = '2021',
marker = list(color = c("Mercedes" = "#A6E4D8",
"Ferrari" = "#F4767B",
"Red Bull" = "#789CDC",
"Alpine F1 Team" = "#7ABEE3",
"Mclaren" =  "#F9B279"
)
),
hovertemplate = paste('<b>Team</b>: %{x}<br>',
'<b>Year</b>: 2021<br>',
'Number of Wins</b>: %{y}<br>'),
showlegend = F) %>%
layout(title = 'Wins by Constructor',
xaxis = list(title = '<br><br><br>Constructor'),
yaxis = list(title = 'Number of Wins'),
barmode = 'group')
wins_plotly
wins_df <- df %>%
filter(year == 2019 | year == 2021) %>%
rename('name'=name.x)
wins_plotly <- wins_df %>%
mutate(col_sum_2019 = if_else(year == 2019, wins, as.integer(0)),
col_sum_2021 = if_else(year == 2021, wins, as.integer(0))) %>%
group_by(name) %>%
summarize(year_2019 = max(col_sum_2019),
year_2021 = max(col_sum_2021)) %>%
arrange(desc(year_2019), desc(year_2021)) %>%
filter(year_2019 != 0 | year_2021 != 0) %>%
plot_ly(type = "bar", name = '2019',
x = ~name,
y = ~year_2019,
marker = list(color =  c("Mercedes" = "#6CD3BF",
"Red Bull" = "#1E5BC6",
"Ferrari" = "#ED1C24",
"Alpine F1 Team" = "#2293D1",
"McLaren" = "#F58020"
)),
hovertemplate = paste('<b>Team</b>: %{x}<br>',
'<b>Year</b>: 2019<br>',
'Number of Wins</b>: %{y}<br>'),
showlegend = F) %>%
add_trace(y = ~year_2021, name = '2021',
marker = list(color = c("Mercedes" = "#A6E4D8",
"Red Bull" = "#789CDC",
"Ferrari" = "#F4767B",
"Alpine F1 Team" = "#7ABEE3",
"Mclaren" =  "#F9B279"
)
),
hovertemplate = paste('<b>Team</b>: %{x}<br>',
'<b>Year</b>: 2021<br>',
'Number of Wins</b>: %{y}<br>'),
showlegend = F) %>%
layout(title = 'Wins by Constructor',
xaxis = list(title = '<br><br><br>Constructor'),
yaxis = list(title = 'Number of Wins'),
barmode = 'group')
wins_plotly
status_19_plotly
status_19 <- df2 %>%
filter(year == 2019) %>%
group_by(name.x, status) %>%
summarize(status_count = n())
df2 <- left_join(results, status2, by = "statusId")
df2 <- left_join(df2, constructors, by = "constructorId")
df2 <- left_join(df2, races, by = "raceId")
## subset
df2 <- subset(df2, select = c(resultId, raceId, driverId, constructorId,
position, points, statusId, status, constructorRef, name.x,
year, circuitId, name.y))
## season 19 status
status_19 <- df2 %>%
filter(year == 2019) %>%
group_by(name.x, status) %>%
summarize(status_count = n())
## plot constructor status for 2019
status_19_plot <- ggplot(status_19, aes(x = name.x, y = status_count, fill = status,
text = paste("<b>Constructor</b>:", status_19$name.x, "<br>",
"<b>Status Count</b>:", status_19$status_count, "<br>",
"<b>Status</b>:", status_19$status, "<br>"))) +
theme(legend.position="none") +
geom_col() +
coord_flip() +
scale_fill_manual(values = c("Accident" = "#000000",
"Car Failure" = "#47ABFF",
"Collision" = "#FF0000",
"Disqualified" = "#505050",
"DNF" = "#ADADAD",
"Finished" = "#1BBC00")) +
labs(x = "Constructor", y = "Status Count",
title ="2019 Constructor Status")
status_19_plotly <- ggplotly(status_19_plot, tooltip = "text")
status_19_plotly
status_19 <- df2 %>%
filter(year == 2019) %>%
filter(name.x != "Toro Rosso" | name.x != "Renault" |
name.x != "Racing Point") %>%
group_by(name.x, status) %>%
summarize(status_count = n())
## plot constructor status for 2019
status_19_plot <- ggplot(status_19, aes(x = name.x, y = status_count, fill = status,
text = paste("<b>Constructor</b>:", status_19$name.x, "<br>",
"<b>Status Count</b>:", status_19$status_count, "<br>",
"<b>Status</b>:", status_19$status, "<br>"))) +
theme(legend.position="none") +
geom_col() +
coord_flip() +
scale_fill_manual(values = c("Accident" = "#000000",
"Car Failure" = "#47ABFF",
"Collision" = "#FF0000",
"Disqualified" = "#505050",
"DNF" = "#ADADAD",
"Finished" = "#1BBC00")) +
labs(x = "Constructor", y = "Status Count",
title ="2019 Constructor Status")
status_19_plotly <- ggplotly(status_19_plot, tooltip = "text")
status_19_plotly
status_19 <- df2 %>%
filter(year == 2019) %>%
filter(name.x != "Toro Rosso" | name.x != "Renault" |
name.x != "Racing Point") %>%
group_by(name.x, status) %>%
summarize(status_count = n())
View(status_19)
status_19 <- df2 %>%
filter(year == 2019) %>%
filter(name.x != "Toro Rosso") %>%
group_by(name.x, status) %>%
summarize(status_count = n())
View(status_19)
status_19 <- df2 %>%
filter(year == 2019) %>%
filter(name.x != "Toro Rosso") %>%
filter(name.x != "Renault") %>%
filter(name.x != "Racing Point") %>%
group_by(name.x, status) %>%
summarize(status_count = n())
View(status_19)
status_21 <- df2 %>%
filter(year == 2021) %>%
filter(name.x != "Aston Martin") %>%
filter(name.x != "Alpine F1 Team") %>%
filter(name.x != "AlphaTauri") %>%
group_by(name.x, status) %>%
summarize(status_count = n())
## plot constructor status for 2021
status_21_plot <- ggplot(status_21, aes(x = name.x, y = status_count, fill = status,
text = paste("<b>Constructor</b>:", status_21$name.x, "<br>",
"<b>Status Count</b>:", status_21$status_count, "<br>",
"<b>Status</b>:", status_21$status, "<br>"))) +
geom_col() +
coord_flip() +
scale_fill_manual(values = c("Accident" = "#000000",
"Car Failure" = "#47ABFF",
"Collision" = "#FF0000",
"Disqualified" = "#505050",
"DNF" = "#ADADAD",
"Finished" = "#1BBC00")) +
labs(x = element_blank(), y = "Status Count",
title="2021 Constructor Status")
status_21_plotly <- ggplotly(status_21_plot, tooltip = "text")
status_21_plotly
status_19_plotly
status_19 <- df2 %>%
filter(year == 2019) %>%
filter(name.x != "Toro Rosso") %>%
filter(name.x != "Renault") %>%
filter(name.x != "Racing Point") %>%
group_by(name.x, status) %>%
summarize(status_count = n())
## plot constructor status for 2019
status_19_plot <- ggplot(status_19, aes(x = name.x, y = status_count, fill = status,
text = paste("<b>Constructor</b>:", status_19$name.x, "<br>",
"<b>Status Count</b>:", status_19$status_count, "<br>",
"<b>Status</b>:", status_19$status, "<br>"))) +
theme(legend.position="none") +
geom_col() +
coord_flip() +
scale_fill_manual(values = c("Accident" = "#000000",
"Car Failure" = "#47ABFF",
"Collision" = "#FF0000",
"Disqualified" = "#505050",
"DNF" = "#ADADAD",
"Finished" = "#1BBC00")) +
labs(x = "Constructor", y = "Status Count",
title ="2019 Constructor Status")
status_19_plotly <- ggplotly(status_19_plot, tooltip = "text")
status_19_plotly
status_21_plotly
status_21 <- df2 %>%
filter(year == 2021) %>%
filter(name.x != "Aston Martin") %>%
filter(name.x != "Alpine F1 Team") %>%
filter(name.x != "AlphaTauri") %>%
group_by(name.x, status) %>%
summarize(status_count = n())
## plot constructor status for 2021
status_21_plot <- ggplot(status_21, aes(x = name.x, y = status_count, fill = status,
text = paste("<b>Constructor</b>:", status_21$name.x, "<br>",
"<b>Status Count</b>:", status_21$status_count, "<br>",
"<b>Status</b>:", status_21$status, "<br>"))) +
geom_col() +
coord_flip() +
scale_fill_manual(values = c("Accident" = "#000000",
"Car Failure" = "#47ABFF",
"Collision" = "#FF0000",
"Disqualified" = "#505050",
"DNF" = "#ADADAD",
"Finished" = "#1BBC00")) +
labs(x = element_blank(), y = "Status Count",
title="2021 Constructor Status")
status_21_plotly <- ggplotly(status_21_plot, tooltip = "text")
status_21_plotly
status_19 <- df2 %>%
filter(year == 2019) %>%
filter(name.x != "Toro Rosso") %>%
filter(name.x != "Renault") %>%
filter(name.x != "Racing Point") %>%
group_by(name.x, status) %>%
summarize(status_count = n())
## plot constructor status for 2019
status_19_plot <- ggplot(status_19, aes(x = name.x, y = status_count, fill = status,
text = paste("<b>Constructor</b>:", status_19$name.x, "<br>",
"<b>Status Count</b>:", status_19$status_count, "<br>",
"<b>Status</b>:", status_19$status, "<br>"))) +
theme(legend.position="none") +
geom_col() +
coord_flip() +
scale_fill_manual(values = c("Accident" = "#000000",
"Car Failure" = "#47ABFF",
"Collision" = "#FF0000",
"Disqualified" = "#505050",
"DNF" = "#ADADAD",
"Finished" = "#1BBC00")) +
labs(x = "Constructor", y = "Status Count",
title ="2019 Constructor Status")
status_19_plotly <- ggplotly(status_19_plot, tooltip = "text")
status_19_plotly
status_21 <- df2 %>%
filter(year == 2021) %>%
filter(name.x != "Aston Martin") %>%
filter(name.x != "Alpine F1 Team") %>%
filter(name.x != "AlphaTauri") %>%
group_by(name.x, status) %>%
summarize(status_count = n())
## plot constructor status for 2021
status_21_plot <- ggplot(status_21, aes(x = name.x, y = status_count, fill = status,
text = paste("<b>Constructor</b>:", status_21$name.x, "<br>",
"<b>Status Count</b>:", status_21$status_count, "<br>",
"<b>Status</b>:", status_21$status, "<br>"))) +
geom_col() +
coord_flip() +
scale_fill_manual(values = c("Accident" = "#000000",
"Car Failure" = "#47ABFF",
"Collision" = "#FF0000",
"Disqualified" = "#505050",
"DNF" = "#ADADAD",
"Finished" = "#1BBC00")) +
labs(x = element_blank(), y = "Status Count",
title="2021 Constructor Status")
status_21_plotly <- ggplotly(status_21_plot, tooltip = "text")
status_21_plotly
