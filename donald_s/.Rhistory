title = "2019 Wins by Constructor")
ggplotly(win_19_plot)
winnings_21 <- season_21 %>%
group_by(constructorId, name.x) %>%
summarize(totalwins = sum(wins)) %>%
arrange(desc(totalwins)) %>%
filter(totalwins != 0)
win_21_plot <- ggplot(winnings_21, aes(x = name.x, y = totalwins, fill = name.x)) +
geom_bar(position = "dodge", stat = "identity") +  theme(axis.text.x = element_text(angle = 45)) +
scale_fill_manual(values = c("Apline F1 Team" = "#2293D1",
"McLaren" = "#F58020",
"Mercedes" = "#6CD3BF",
"Red Bull" = "#1E5BC6")) +
labs (x = "Constructors", y = "Number of Wins", fill = "Constructor Names",
title = "2021 Wins by Constructor")
ggplotly(win_21_plot)
points_19_plot <- ggplot(points_19, aes(x = name, y = totalpoints, fill = name)) +
geom_bar(position = "dodge", stat = "identity") +  theme(axis.text.x = element_text(angle = 45)) +
scale_fill_manual(values = c("Alfa Romeo" = "#B12039",
"Ferrari" = "#ED1C24",
"Haas F1 Team" = "#B6BABD",
"McLaren" = "#F58020",
"Mercedes" = "#6CD3BF",
"Racing Point" = "#F596C8",
"Red Bull" = "#1E5BC6",
"Renault" = "#FFF500",
"Toro Rosso" = "#469BFF",
"Williams" = "#37BEDD")) +
labs (x = "Constructors", y = "Total Points", fill = "Constructor Names",
title = "Total Points Earned by Constructors in 2019")
ggplotly(points_19_plot)
points_21_plot <- ggplot(points_21, aes(x = name.x, y = totalpoints, fill = name.x)) +
geom_bar(position = "dodge", stat = "identity") +  theme(axis.text.x = element_text(angle = 45)) +
scale_fill_manual(values = c("Alfa Romeo" = "#B12039",
"AlphaTauri" = "#4E7C9B",
"Alpine F1 Team" = "#2293D1",
"Aston Martin" = "#2D826D",
"Ferrari" = "#ED1C24",
"McLaren" = "#F58020",
"Mercedes" = "#6CD3BF",
"Red Bull" = "#1E5BC6",
"Williams" = "#37BEDD")) +
labs (x = "Constructors", y = "Total Points", fill = "Constructor Names",
title = "Total Points Earned by Constructors in 2021")
ggplotly(points_21_plot)
df2 <- left_join(results, status2, by = "statusId")
df2 <- left_join(df2, constructors, by = "constructorId")
df2 <- left_join(df2, races, by = "raceId")
## subset
df2 <- subset(df2, select = c(resultId, raceId, driverId, constructorId,
position, points, statusId, status, constructorRef, name.x,
year, circuitId, name.y))
ferrari_status_2019 <- df2 %>%
filter(name.x == "Ferrari", year == 2019) %>%
na.omit() %>%
group_by(name.x, status) %>%
summarize(status_count = n())
## compute position of labels
ferrari_status_2019 <- ferrari_status_2019 %>%
arrange(desc(status_count)) %>%
mutate(prop = status_count / sum(ferrari_status_2019$status_count) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
## red bull
rb_status_2019 <- df2 %>%
filter(name.x == "Red Bull", year == 2019) %>%
na.omit() %>%
group_by(name.x, status) %>%
summarize(status_count = n())
## compute position of labels
rb_status_2019 <- rb_status_2019 %>%
arrange(desc(status_count)) %>%
mutate(prop = status_count / sum(rb_status_2019$status_count) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
## mercedes
merc_status_2019 <- df2 %>%
filter(name.x == "Mercedes", year == 2019) %>%
na.omit() %>%
group_by(name.x, status) %>%
summarize(status_count = n())
## compute position of labels
merc_status_2019 <- merc_status_2019 %>%
arrange(desc(status_count)) %>%
mutate(prop = status_count / sum(merc_status_2019$status_count) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
## mcclaren
mcl_status_2019 <- df2 %>%
filter(name.x == "McLaren", year == 2019) %>%
na.omit() %>%
group_by(name.x, status) %>%
summarize(status_count = n())
## compute position of labels
mcl_status_2019 <- mcl_status_2019 %>%
arrange(desc(status_count)) %>%
mutate(prop = status_count / sum(mcl_status_2019$status_count) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
pie19 <- plot_ly(labels = ~status, values = ~prop,
textposition = 'inside',textinfo = 'label+percent') %>%
add_pie(data = ferrari_status_2019, name = "Ferrari", marker = list(colors = c("#1BBC00", "#FF0000",
"#ADADAD", "#47ABFF",
"#000000", "#505050")),
domain = list(row = 0, column = 0)) %>%
add_pie(data = rb_status_2019, name = "Red Bull",marker = list(colors = c("#1BBC00", "#ADADAD",
"#47ABFF", "#000000",
"#FF0000")),
domain = list(row = 0, column = 1))%>%
add_pie(data = merc_status_2019, name = "Mercedes", marker = list(colors = c("#1BBC00", "#000000",
"#47ABFF",
"#ADADAD")),
domain = list(row = 1, column = 0))%>%
add_pie(data = mcl_status_2019, name = "McLaren", marker = list(colors = c("#1BBC00", "#ADADAD",
"#47ABFF", "#FF0000",
"#505050")),
domain = list(row = 1, column = 1))%>%
layout(title = '2019 Constructor Statuses', showlegend = T, grid=list(rows=2, columns=2),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
annotations = list(x = c(.004, .55, .0002, .55),
y = c(.78, .78, .22, .22),
text = c("Ferrari","Red Bull","Mercedes","McLaren"),
xref = "papper",
yref = "papper",
showarrow = F
)
)
pie19
## ferrari
ferrari_status_2021 <- df2 %>%
filter(name.x == "Ferrari", year == 2021) %>%
na.omit() %>%
group_by(name.x, status) %>%
summarize(status_count = n())
## compute position of labels
ferrari_status_2021 <- ferrari_status_2021 %>%
arrange(desc(status_count)) %>%
mutate(prop = status_count / sum(ferrari_status_2021$status_count) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
## red bull
rb_status_2021 <- df2 %>%
filter(name.x == "Red Bull", year == 2021) %>%
na.omit() %>%
group_by(name.x, status) %>%
summarize(status_count = n())
## compute position of labels
rb_status_2021 <- rb_status_2021 %>%
arrange(desc(status_count)) %>%
mutate(prop = status_count / sum(rb_status_2021$status_count) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
## mercedes
merc_status_2021 <- df2 %>%
filter(name.x == "Mercedes", year == 2021) %>%
na.omit() %>%
group_by(name.x, status) %>%
summarize(status_count = n())
## compute position of labels
merc_status_2021 <- merc_status_2021 %>%
arrange(desc(status_count)) %>%
mutate(prop = status_count / sum(merc_status_2021$status_count) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
## mcclaren
mcl_status_2021 <- df2 %>%
filter(name.x == "McLaren", year == 2021) %>%
na.omit() %>%
group_by(name.x, status) %>%
summarize(status_count = n())
## compute position of labels
mcl_status_2021 <- mcl_status_2021 %>%
arrange(desc(status_count)) %>%
mutate(prop = status_count / sum(mcl_status_2021$status_count) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
pie21 <- plot_ly(labels = ~status, values = ~prop,
textposition = 'inside',textinfo = 'label+percent') %>%
add_pie(data = ferrari_status_2021, name = "Ferrari", marker = list(colors = c("#1BBC00", "#ADADAD",
"#47ABFF", "#FF0000")),
domain = list(row = 0, column = 0)) %>%
add_pie(data = rb_status_2021, name = "Red Bull", marker = list(colors = c("#1BBC00", "#FF0000",
"#ADADAD", "#000000",
"#47ABFF")),
domain = list(row = 0, column = 1))%>%
add_pie(data = merc_status_2021, name = "Mercedes", marker = list(colors = c("#1BBC00", "#FF0000",
"#47ABFF", "#ADADAD")),
domain = list(row = 1, column = 0))%>%
add_pie(data = mcl_status_2021, name = "McLaren", marker = list(colors = c("#1BBC00", "#ADADAD",
"#47ABFF","#FF0000")),
domain = list(row = 1, column = 1)) %>%
layout(title = '2021 Constructor Statuses', showlegend = T, grid=list(rows=2, columns=2),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
annotations = list(x = c(.004, .55, .0002, .55),
y = c(.78, .78, .22, .22),
text = c("Ferrari","Red Bull","Mercedes","McLaren"),
xref = "papper",
yref = "papper",
showarrow = F
)
)
pie21
circuits_type_df <- circuit_type %>%
mutate(circuit_type =
case_when(
street_circuit == 1 ~ "street",
road_circuit == 1 ~ "road",
race_circuit == 1 ~ "race"
)
) %>%
dplyr::select(circuitId, circuit_type) %>%
arrange(circuitId)
circuits_df <- circuits %>%
mutate(information = paste("<a target='_blank' href='", url,"'>link</a>")) %>%
dplyr::select(circuitId, name, location, country, lat, lng, alt, information) %>%
arrange(country, location, name)
circuits_df$country <-
ifelse(circuits_df$country == "America", "United States", circuits_df$country)
circuits_df$country <-
ifelse(circuits_df$country == "USA", "United States", circuits_df$country)
circuits_df <- circuits_df %>%
left_join(circuits_type_df, by = "circuitId") %>%
dplyr::select(
circuitId, name, location, country,
circuit_type, lat, lng, alt, information
) %>%
arrange(country, location, name)
country_sd <- crosstalk::SharedData$new(circuits_df)
map <- leaflet() %>%
addProviderTiles(providers$CartoDB.Voyager) %>%
addMarkers(data = country_sd,
lat = ~lat, lng = ~lng,
icon = list(
iconUrl = 'track-icon-19.png',
iconSize = c(25, 25)
),
popup = ~paste("<b>", name, "</b><br/><i>Type</i>: ", circuit_type, "<br/><i>Location</i>: ", location, ", ", country, "<br/><i>GPS</i>: (", lat, ",", lng, ",", alt, ")", sep = ""))
bscols(map)
bscols(
filter_select("CountrySelector", "Country Circuit Selector:", country_sd, country)
)
circuits_type_df <- circuit_type %>%
mutate(circuit_type =
case_when(
street_circuit == 1 ~ "street",
road_circuit == 1 ~ "road",
race_circuit == 1 ~ "race"
)
) %>%
dplyr::select(circuitId, circuit_type) %>%
arrange(circuitId)
circuits_df <- circuits %>%
mutate(information = paste("<a target='_blank' href='", url,"'>link</a>")) %>%
dplyr::select(circuitId, name, location, country, lat, lng, alt, information) %>%
arrange(country, location, name)
circuits_df$country <-
ifelse(circuits_df$country == "America", "United States", circuits_df$country)
circuits_df$country <-
ifelse(circuits_df$country == "USA", "United States", circuits_df$country)
circuits_df <- circuits_df %>%
left_join(circuits_type_df, by = "circuitId") %>%
dplyr::select(
circuitId, name, location, country,
circuit_type, lat, lng, alt, information
) %>%
arrange(country, location, name)
country_sd <- crosstalk::SharedData$new(circuits_df)
map <- leaflet() %>%
addProviderTiles(providers$CartoDB.Voyager) %>%
addMarkers(data = country_sd,
lat = ~lat, lng = ~lng,
icon = list(
iconUrl = 'track-icon-19.png',
iconSize = c(25, 25)
),
popup = ~paste("<b>", name, "</b><br/><i>Type</i>: ", circuit_type, "<br/><i>Location</i>: ", location, ", ", country, "<br/><i>GPS</i>: (", lat, ",", lng, ",", alt, ")", sep = ""))
bscols(map)
bscols(
filter_select("CountrySelector", "Country Circuit Selector:", country_sd, ~country)
)
race_standings <- left_join(standings, races, by="raceId")
driver_race_standings <- left_join(race_standings, drivers, by="driverId")
races2021 <- driver_race_standings %>% filter(year==2021)
races2019 <- driver_race_standings %>% filter(year==2019)
xover_2021 <- xover_total %>% filter(year==2021) %>% arrange(full_name)
xover_2019 <- xover_total %>% filter(year==2019) %>% arrange(full_name)
xover_2019 <- xover_2019[-c(2,16),]
xover_2019 <- xover_2019 %>% filter(driverId %in% races2019$driverId)
races2021 <- left_join(races2021, xover_2021, by="driverId")
races2019 <- left_join(races2019, xover_2019, by="driverId")
wins_2021 <- ggplot(races2021) +
geom_line(aes(x=date,y=position,group=full_name,color=full_name,linetype=full_name,text=paste("<b>Driver: </b>",full_name,"<br><b>Team: ",constructor_name))) + scale_color_manual(values=xover_2021$colorcol)+ scale_linetype_manual(values=xover_2021$line_type) + coord_flip() + ggtitle("2021") + theme_classic() + labs(x = "Date", y = "Position")
ggplotly(wins_2021, tooltip = "text")
race_standings <- left_join(standings, races, by="raceId")
driver_race_standings <- left_join(race_standings, drivers, by="driverId")
races2021 <- driver_race_standings %>% filter(year==2021)
races2019 <- driver_race_standings %>% filter(year==2019)
xover_2021 <- xover_total %>% filter(year==2021) %>% arrange(full_name)
xover_2019 <- xover_total %>% filter(year==2019) %>% arrange(full_name)
xover_2019 <- xover_2019[-c(2,16),]
xover_2019 <- xover_2019 %>% filter(driverId %in% races2019$driverId)
races2021 <- left_join(races2021, xover_2021, by="driverId")
races2019 <- left_join(races2019, xover_2019, by="driverId")
wins_2021 <- ggplot(races2021) +
geom_line(aes(x=date,y=position,group=full_name,color=full_name,linetype=full_name,text=paste("<b>Driver: </b>",full_name,"<br><b>Team: ",constructor_name))) + scale_color_manual(values=xover_2021$colorcol)+ scale_linetype_manual(values=xover_2021$line_type) + coord_flip() + ggtitle("2021") + theme_classic() + labs(x = "Date", y = "Position")
#ggplotly(wins_2021, tooltip = "text")
wins_2019 <- ggplot(races2019) +
geom_line(aes(x=date,y=position,group=full_name,color=full_name,linetype=full_name,text=paste("<b>Driver: </b>",full_name,"<br><b>Team: ",constructor_name))) + scale_color_manual(values=xover_2019$colorcol)+ scale_linetype_manual(values=xover_2019$line_type) + coord_flip() + ggtitle("2019") + theme_classic() + labs(x = "Date", y = "Position") + guides(color=guide_legend(ncol=2))
ggplotly(wins_2019)
race_standings <- left_join(standings, races, by="raceId")
driver_race_standings <- left_join(race_standings, drivers, by="driverId")
races2021 <- driver_race_standings %>% filter(year==2021)
races2019 <- driver_race_standings %>% filter(year==2019)
xover_2021 <- xover_total %>% filter(year==2021) %>% arrange(full_name)
xover_2019 <- xover_total %>% filter(year==2019) %>% arrange(full_name)
xover_2019 <- xover_2019[-c(2,16),]
xover_2019 <- xover_2019 %>% filter(driverId %in% races2019$driverId)
races2021 <- left_join(races2021, xover_2021, by="driverId")
races2019 <- left_join(races2019, xover_2019, by="driverId")
wins_2021 <- ggplot(races2021) +
geom_line(aes(x=date,y=position,group=full_name,color=full_name,linetype=full_name,text=paste("<b>Driver: </b>",full_name,"<br><b>Team: ",constructor_name))) + scale_color_manual(values=xover_2021$colorcol)+ scale_linetype_manual(values=xover_2021$line_type) + coord_flip() + ggtitle("2021") + theme_classic() + labs(x = "Date", y = "Position")
#ggplotly(wins_2021, tooltip = "text")
wins_2019 <- ggplot(races2019) +
geom_line(aes(x=date,y=position,group=full_name,color=full_name,linetype=full_name,text=paste("<b>Driver: </b>",full_name,"<br><b>Team: ",constructor_name))) + scale_color_manual(values=xover_2019$colorcol)+ scale_linetype_manual(values=xover_2019$line_type) + coord_flip() + ggtitle("2019") + theme_classic() + labs(x = "Date", y = "Position") + guides(color=guide_legend(ncol=2))
#ggplotly(wins_2019)
race_standings <- left_join(standings, races, by="raceId")
driver_race_standings <- left_join(race_standings, drivers, by="driverId")
races2021 <- driver_race_standings %>% filter(year==2021)
races2019 <- driver_race_standings %>% filter(year==2019)
xover_2021 <- xover_total %>% filter(year==2021) %>% arrange(full_name)
xover_2019 <- xover_total %>% filter(year==2019) %>% arrange(full_name)
xover_2019 <- xover_2019[-c(2,16),]
xover_2019 <- xover_2019 %>% filter(driverId %in% races2019$driverId)
races2021 <- left_join(races2021, xover_2021, by="driverId")
races2019 <- left_join(races2019, xover_2019, by="driverId")
wins_2021 <- ggplot(races2021) +
geom_line(aes(x=date,y=position,group=full_name,color=full_name,linetype=full_name,text=paste("<b>Driver: </b>",full_name,"<br><b>Team: ",constructor_name))) + scale_color_manual(values=xover_2021$colorcol)+ scale_linetype_manual(values=xover_2021$line_type) + coord_flip() + ggtitle("2021") + theme_classic() + labs(x = "Date", y = "Position")
ggplotly(wins_2021)#, tooltip = "text")
sessionInfo()
race_standings <- left_join(standings, races, by="raceId")
driver_race_standings <- left_join(race_standings, drivers, by="driverId")
races2021 <- driver_race_standings %>% filter(year==2021)
races2019 <- driver_race_standings %>% filter(year==2019)
xover_2021 <- xover_total %>% filter(year==2021) %>% arrange(full_name)
xover_2019 <- xover_total %>% filter(year==2019) %>% arrange(full_name)
xover_2019 <- xover_2019[-c(2,16),]
xover_2019 <- xover_2019 %>% filter(driverId %in% races2019$driverId)
races2021 <- left_join(races2021, xover_2021, by="driverId")
races2019 <- left_join(races2019, xover_2019, by="driverId")
View(races2021)
View(races2019)
wins_2021 <- ggplot(races2021) +
geom_line(aes(x=date,y=position,group=full_name,color=full_name,linetype=full_name,text=paste("<b>Driver: </b>",full_name,"<br><b>Team: ",constructor_name))) + scale_color_manual(values=xover_2021$colorcol)+ scale_linetype_manual(values=xover_2021$line_type) + coord_flip() + ggtitle("2021") + theme_classic() + labs(x = "Date", y = "Position")
#wins_2021 <- ggplot(races2021) +
#  geom_line(aes(x=date,y=position,group=full_name,color=full_name,linetype=full_name,text=paste("<b>Driver: </b>",full_name,"<br><b>Team: ",constructor_name))) + #scale_color_manual(values=xover_2021$colorcol)+ scale_linetype_manual(values=xover_2021$line_type) + coord_flip() + ggtitle("2021") + theme_classic() + labs(x = "Date", y = "Position")
ggplotly(wins_2021, tooltip = "text")
race_standings <- left_join(standings, races, by="raceId")
driver_race_standings <- left_join(race_standings, drivers, by="driverId")
races2021 <- driver_race_standings %>% filter(year==2021)
races2019 <- driver_race_standings %>% filter(year==2019)
xover_2021 <- xover_total %>% filter(year==2021) %>% arrange(full_name)
xover_2019 <- xover_total %>% filter(year==2019) %>% arrange(full_name)
xover_2019 <- xover_2019[-c(2,16),]
xover_2019 <- xover_2019 %>% filter(driverId %in% races2019$driverId)
races2021 <- left_join(races2021, xover_2021, by="driverId")
races2019 <- left_join(races2019, xover_2019, by="driverId")
View(races2021)
View(races2019)
wins_2021 <- ggplot(races2021) +
geom_line(aes(x=date,y=position,group=full_name,color=full_name,linetype=full_name,text=paste("<b>Driver: </b>","","<br><b>Team: ",""))) + scale_color_manual(values=xover_2021$colorcol)+ scale_linetype_manual(values=xover_2021$line_type) + coord_flip() + ggtitle("2021") + theme_classic() + labs(x = "Date", y = "Position")
#wins_2021 <- ggplot(races2021) +
#  geom_line(aes(x=date,y=position,group=full_name,color=full_name,linetype=full_name,text=paste("<b>Driver: </b>",full_name,"<br><b>Team: ",constructor_name))) + #scale_color_manual(values=xover_2021$colorcol)+ scale_linetype_manual(values=xover_2021$line_type) + coord_flip() + ggtitle("2021") + theme_classic() + labs(x = "Date", y = "Position")
ggplotly(wins_2021, tooltip = "text")
wins_2019 <- ggplot(races2019) +
geom_line(aes(x=date,y=position,group=full_name,color=full_name,linetype=full_name,text=paste("<b>Driver: </b>",full_name,"<br><b>Team: ",constructor_name))) + scale_color_manual(values=xover_2019$colorcol)+ scale_linetype_manual(values=xover_2019$line_type) + coord_flip() + ggtitle("2019") + theme_classic() + labs(x = "Date", y = "Position") + guides(color=guide_legend(ncol=2))
ggplotly(wins_2019)
race_standings <- left_join(standings, races, by="raceId")
driver_race_standings <- left_join(race_standings, drivers, by="driverId")
races2021 <- driver_race_standings %>% filter(year==2021)
races2019 <- driver_race_standings %>% filter(year==2019)
xover_2021 <- xover_total %>% filter(year==2021) %>% arrange(full_name)
xover_2019 <- xover_total %>% filter(year==2019) %>% arrange(full_name)
xover_2019 <- xover_2019[-c(2,16),]
xover_2019 <- xover_2019 %>% filter(driverId %in% races2019$driverId)
races2021 <- left_join(races2021, xover_2021, by="driverId")
races2019 <- left_join(races2019, xover_2019, by="driverId")
View(races2021)
View(races2019)
wins_2021 <- ggplot(races2021) +
geom_line(aes(x=date,y=position,group=full_name,color=full_name,linetype=full_name,text=paste("<b>Driver: </b>",constructor_name,"<br><b>Team: ",constructor_name))) + scale_color_manual(values=xover_2021$colorcol)+ scale_linetype_manual(values=xover_2021$line_type) + coord_flip() + ggtitle("2021") + theme_classic() + labs(x = "Date", y = "Position")
#wins_2021 <- ggplot(races2021) +
#  geom_line(aes(x=date,y=position,group=full_name,color=full_name,linetype=full_name,text=paste("<b>Driver: </b>",full_name,"<br><b>Team: ",constructor_name))) + #scale_color_manual(values=xover_2021$colorcol)+ scale_linetype_manual(values=xover_2021$line_type) + coord_flip() + ggtitle("2021") + theme_classic() + labs(x = "Date", y = "Position")
ggplotly(wins_2021, tooltip = "text")
wins_2019 <- ggplot(races2019) +
geom_line(aes(x=date,y=position,group=full_name,color=full_name,linetype=full_name,text=paste("<b>Driver: </b>",full_name,"<br><b>Team: ",constructor_name))) + scale_color_manual(values=xover_2019$colorcol)+ scale_linetype_manual(values=xover_2019$line_type) + coord_flip() + ggtitle("2019") + theme_classic() + labs(x = "Date", y = "Position") + guides(color=guide_legend(ncol=2))
ggplotly(wins_2019)
race_standings <- left_join(standings, races, by="raceId")
driver_race_standings <- left_join(race_standings, drivers, by="driverId")
races2021 <- driver_race_standings %>% filter(year==2021)
races2019 <- driver_race_standings %>% filter(year==2019)
xover_2021 <- xover_total %>% filter(year==2021) %>% arrange(full_name)
xover_2019 <- xover_total %>% filter(year==2019) %>% arrange(full_name)
xover_2019 <- xover_2019[-c(2,16),]
xover_2019 <- xover_2019 %>% filter(driverId %in% races2019$driverId)
races2021 <- left_join(races2021, xover_2021, by="driverId")
races2019 <- left_join(races2019, xover_2019, by="driverId")
View(races2021)
wins_2021 <- ggplot(races2021) +
geom_line(aes(x=date,y=position,group=full_name,color=full_name,linetype=full_name,text=paste("<b>Driver: </b>",full_name,"<br><b>Team: ",constructor_name))) + scale_color_manual(values=xover_2021$colorcol)+ scale_linetype_manual(values=xover_2021$line_type) + coord_flip() + ggtitle("2021") + theme_classic() + labs(x = "Date", y = "Position")
wins_2021 <- ggplot(races2021) +
geom_line(aes(x=date,y=position,group=full_name,color=full_name,linetype=full_name,text=paste("<b>Driver: </b>",full_name,"<br><b>Team: ",constructor_name))) + scale_color_manual(values=xover_2021$colorcol)+ scale_linetype_manual(values=xover_2021$line_type) + coord_flip() + ggtitle("2021") + theme_classic() + labs(x = "Date", y = "Position")
ggplotly(wins_2021, tooltip = "text")
#helper tables
xover <-
results %>%
left_join(races, by = ("raceId")) %>%
filter(year == 2019 | year == 2021) %>%
select(driverId, constructorId, year) %>%
left_join(drivers, by = ("driverId")) %>%
left_join(constructors, by = ("constructorId")) %>%
mutate(full_name = paste(forename, surname)) %>%
rename(constructor_name = name) %>%
select(driverId, full_name, constructorId, constructor_name, year) %>%
group_by(driverId, full_name, constructorId, constructor_name, year) %>%
slice(1)
#xover$full_name <- iconv(xover$full_name, from="UTF-8", to="LATIN1")
xover_total <- xover %>%
arrange(year,constructor_name,driverId) %>%
group_by(year,constructor_name) %>%
mutate(rn=row_number()) %>%
ungroup() %>%
mutate(line_type=case_when(
rn==1 ~ 'solid',
rn==2 ~ 'dashed',
rn==3 ~ 'dotted')) %>%
mutate(colorcol=case_when(
constructor_name=='Alfa Romeo' ~ '#B12039',
constructor_name=='AlphaTauri' ~ '#4E7C9B',
constructor_name=='Alpine F1 Team' ~ '#2293D1',
constructor_name=='Aston Martin' ~ '#2D826D',
constructor_name=='Ferrari' ~ '#ED1C24',
constructor_name=='McLaren' ~ '#F58020',
constructor_name=='Mercedes' ~ '#6CD3BF',
constructor_name=='Red Bull' ~ '#1E5BC6',
constructor_name=='Williams' ~ '#37BEDD',
constructor_name=='Haas F1 Team' ~ '#B6BABD',
constructor_name=='Racing Point' ~ '#F596C8',
constructor_name=='Renault' ~ '#FFF500',
constructor_name=='Toro Rosso' ~ '#469BFF'
))
circuits_joined <- circuits %>%
left_join(circuit_type) %>%
rename(circuit_name = name)
circuits_by_year <- races %>%
select(raceId, year, circuitId, name) %>%
rename(race_name = name) %>%
left_join(circuits_joined, by = c("circuitId")) %>%
mutate(circuit_type =
case_when(street_circuit == 1 ~ "street",
road_circuit == 1 ~ "street",
race_circuit == 1 ~ "race",
)
) %>%
select(year, circuitId, circuit_name, circuit_type)
skinny_races_circuits <- races %>%
rename(race_name = name) %>%
select(raceId, circuitId, race_name, year)
race_standings <- left_join(standings, races, by="raceId")
driver_race_standings <- left_join(race_standings, drivers, by="driverId")
races2021 <- driver_race_standings %>% filter(year==2021)
races2019 <- driver_race_standings %>% filter(year==2019)
xover_2021 <- xover_total %>% filter(year==2021) %>% arrange(full_name)
xover_2019 <- xover_total %>% filter(year==2019) %>% arrange(full_name)
xover_2019 <- xover_2019[-c(2,16),]
xover_2019 <- xover_2019 %>% filter(driverId %in% races2019$driverId)
races2021 <- left_join(races2021, xover_2021, by="driverId")
races2019 <- left_join(races2019, xover_2019, by="driverId")
View(races2021)
wins_2021 <- ggplot(races2021) +
geom_line(aes(x=date,y=position,group=full_name,color=full_name,linetype=full_name,text=paste("<b>Driver: </b>",full_name,"<br><b>Team: ",constructor_name))) + scale_color_manual(values=xover_2021$colorcol)+ scale_linetype_manual(values=xover_2021$line_type) + coord_flip() + ggtitle("2021") + theme_classic() + labs(x = "Date", y = "Position")
wins_2021 <- ggplot(races2021) +
geom_line(aes(x=date,y=position,group=full_name,color=full_name,linetype=full_name,text=paste("<b>Driver: </b>",full_name,"<br><b>Team: ",constructor_name))) + scale_color_manual(values=xover_2021$colorcol)+ scale_linetype_manual(values=xover_2021$line_type) + coord_flip() + ggtitle("2021") + theme_classic() + labs(x = "Date", y = "Position")
ggplotly(wins_2021, tooltip = "text")
wins_2019 <- ggplot(races2019) +
geom_line(aes(x=date,y=position,group=full_name,color=full_name,linetype=full_name,text=paste("<b>Driver: </b>",full_name,"<br><b>Team: ",constructor_name))) + scale_color_manual(values=xover_2019$colorcol)+ scale_linetype_manual(values=xover_2019$line_type) + coord_flip() + ggtitle("2019") + theme_classic() + labs(x = "Date", y = "Position") + guides(color=guide_legend(ncol=2))
ggplotly(wins_2019)
race_standings <- left_join(standings, races, by="raceId")
driver_race_standings <- left_join(race_standings, drivers, by="driverId")
races2021 <- driver_race_standings %>% filter(year==2021)
races2019 <- driver_race_standings %>% filter(year==2019)
xover_2021 <- xover_total %>% filter(year==2021) %>% arrange(full_name)
xover_2019 <- xover_total %>% filter(year==2019) %>% arrange(full_name)
xover_2019 <- xover_2019[-c(2,16),]
xover_2019 <- xover_2019 %>% filter(driverId %in% races2019$driverId)
races2021 <- left_join(races2021, xover_2021, by="driverId")
races2019 <- left_join(races2019, xover_2019, by="driverId")
View(races2021)
wins_2021 <- ggplot(races2021) +
geom_line(aes(x=date,y=position,group=full_name,color=full_name,linetype=full_name,text=paste("<b>Driver: </b>",full_name,"<br><b>Team: ",constructor_name))) + scale_color_manual(values=xover_2021$colorcol)+ scale_linetype_manual(values=xover_2021$line_type) + coord_flip() + ggtitle("2021") + theme_classic() + labs(x = "Date", y = "Position")
wins_2021 <- ggplot(races2021) +
geom_line(aes(x=date,y=position,group=full_name,color=full_name,linetype=full_name,text=paste("<b>Driver: </b>",full_name,"<br><b>Team: ",constructor_name))) + scale_color_manual(values=xover_2021$colorcol)+ scale_linetype_manual(values=xover_2021$line_type) + coord_flip() + ggtitle("2021") + theme_classic() + labs(x = "Date", y = "Position")
ggplotly(wins_2021, tooltip = "text")
wins_2019 <- ggplot(races2019) +
geom_line(aes(x=date,y=position,group=full_name,color=full_name,linetype=full_name,text=paste("<b>Driver: </b>",full_name,"<br><b>Team: ",constructor_name))) + scale_color_manual(values=xover_2019$colorcol)+ scale_linetype_manual(values=xover_2019$line_type) + coord_flip() + ggtitle("2019") + theme_classic() + labs(x = "Date", y = "Position") + guides(color=guide_legend(ncol=2))
ggplotly(wins_2019)
#helper tables
xover <-
results %>%
left_join(races, by = ("raceId")) %>%
filter(year == 2019 | year == 2021) %>%
select(driverId, constructorId, year) %>%
left_join(drivers, by = ("driverId")) %>%
left_join(constructors, by = ("constructorId")) %>%
mutate(full_name = paste(forename, surname)) %>%
rename(constructor_name = name) %>%
select(driverId, full_name, constructorId, constructor_name, year) %>%
group_by(driverId, full_name, constructorId, constructor_name, year) %>%
slice(1)
